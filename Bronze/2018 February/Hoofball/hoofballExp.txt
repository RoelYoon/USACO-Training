Simulation/graph traversal solution. O(n*logn)

Model the situation described in the problem as a directed graph where each cow is a vertex and 
a directed edge between cows a and b represents the relationship that cow a will always pass to
cow b. (Observe that this graph will also always be a successor graph, which makes the traversal
quite a bit simpler.)

The algorithm first constructs the graph using the input. Then, it looks for nodes with an 
in-degree of 0. The logic of looking for nodes with 0 in-degrees is that these nodes represent 
the cows which cannot receive passes from any other cows. 

However, simply counting these nodes is not enough as there is an edge case. Consider the 
following input case:

5
1 3 5 6 8

As you may notice, the graph is disconnected. This by itself does not impose a problem to the
algorithm. The problem is that a disconnected part of the graph contains exactly two nodes which
point to each other. This means they both have an in-degree of 1, bypassing our previous 
detection, yet they are not able to be reached by any other cow at all (except by each other).

There are a lot of ways to solve this issue, and it does not necessarily need to be the most
optimal. At this point, we've already sorted the cows in O(n*logn) time in order to construct 
the graph, so any algorithm quicker than or equal to quasi-linear time does not change the 
time complexity and suffices to achieve what I believe to be the optimal overall time complexity. 

I simply went with the method of simulating the ball passes from all the nodes which have 0
in-degrees, which is done by traversing through the successor graph starting from those nodes,
and checking which nodes have not been visited. This is guaranteed to be O(n) at most.